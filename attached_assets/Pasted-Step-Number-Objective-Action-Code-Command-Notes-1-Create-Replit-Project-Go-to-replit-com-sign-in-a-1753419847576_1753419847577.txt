Step Number	Objective	Action	Code/Command	Notes
1	Create Replit Project	Go to replit.com, sign in, and create a new Repl.	-	Select “Node.js” template. Name project (e.g., STR-CRM).
1.1	Install Next.js with TypeScript	Install Next.js and TypeScript dependencies.	npm init -y && npm install next@latest react@latest react-dom@latest typescript@latest @types/react @types/react-dom @types/node	Ensures TypeScript support for your YCA experience.
1.2	Configure TypeScript	Create tsconfig.json.	npx tsc --init && echo '{ "compilerOptions": { "target": "es5", "lib": ["dom", "dom.iterable", "esnext"], "allowJs": true, "skipLibCheck": true, "strict": true, "forceConsistentCasingInFileNames": true, "noEmit": true, "esModuleInterop": true, "module": "esnext", "moduleResolution": "node", "resolveJsonModule": true, "isolatedModules": true, "jsx": "preserve", "incremental": true }, "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"], "exclude": ["node_modules"] }' > tsconfig.json	Optimized for Next.js.
1.3	Configure Next.js	Create next.config.js.	echo 'module.exports = { reactStrictMode: true };' > next.config.js	Enables strict mode for better error handling.
1.4	Set Up Project Structure	Create folders and initial page.	mkdir -p pages components lib styles public && echo 'import type { NextPage } from "next"; const Home: NextPage = () => { return <div>Welcome to STR CRM</div>; }; export default Home;' > pages/index.tsx	Basic structure for CRM and public page.
1.5	Run the App	Add scripts to package.json and run.	sed -i 's/"scripts": {/"scripts": { "dev": "next dev", "build": "next build", "start": "next start", /' package.json && npm run dev	Access via Replit’s preview URL (e.g., https://STR-CRM.yourusername.repl.co).
2	Install SQLite	Install SQLite for local storage.	npm install better-sqlite3	Keeps data local for discretion.
2.1	Initialize Database	Create database connection.	echo 'import Database from "better-sqlite3"; const db = new Database("data.db", { verbose: console.log }); export default db;' > lib/db.ts	Uses better-sqlite3 for performance.
2.2	Create Tables	Create database schema.	echo 'import db from "./db"; export function initDb() { db.exec(`CREATE TABLE IF NOT EXISTS rooms (id TEXT PRIMARY KEY, property TEXT, rates JSON, code TEXT, frontDoorCode TEXT, codeExpiry TEXT, paymentStatus TEXT, cleaningStatus TEXT, linenStatus TEXT, notes TEXT)`); db.exec(`CREATE TABLE IF NOT EXISTS bookings (id TEXT PRIMARY KEY, roomId TEXT, guestId TEXT, plan TEXT, startDate TEXT, endDate TEXT, paymentStatus TEXT, code TEXT, frontDoorCode TEXT)`); db.exec(`CREATE TABLE IF NOT EXISTS guests (id TEXT PRIMARY KEY, name TEXT, contact TEXT, referralSource TEXT, cashAppTag TEXT, notes TEXT)`); db.exec(`CREATE TABLE IF NOT EXISTS payments (id TEXT PRIMARY KEY, bookingId TEXT, amount REAL, method TEXT, dateReceived TEXT, transactionId TEXT, notes TEXT)`); db.exec(`CREATE TABLE IF NOT EXISTS cleaning (id TEXT PRIMARY KEY, roomId TEXT, type TEXT, date TEXT, cleaner TEXT, status TEXT, notes TEXT)`); db.exec(`CREATE TABLE IF NOT EXISTS inventory (id TEXT PRIMARY KEY, property TEXT, item TEXT, quantity INTEGER, threshold INTEGER)`); db.exec(`CREATE TABLE IF NOT EXISTS maintenance (id TEXT PRIMARY KEY, roomId TEXT, issue TEXT, status TEXT, dateReported TEXT)`); db.exec(`CREATE TABLE IF NOT EXISTS users (id TEXT PRIMARY KEY, username TEXT UNIQUE, password TEXT, role TEXT, property TEXT)`); db.exec(`CREATE TABLE IF NOT EXISTS inquiries (id TEXT PRIMARY KEY, name TEXT, contact TEXT, referralSource TEXT, plan TEXT, status TEXT, trackerLink TEXT, linkExpiry TEXT)`); }' > lib/initDb.ts	Tables for rooms, bookings, payments, cleaning, etc.
2.3	Initialize API	Create API to init database.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import { initDb } from "../../lib/initDb"; export default function handler(req: NextApiRequest, res: NextApiResponse) { initDb(); res.status(200).json({ message: "Database initialized" }); }' > pages/api/init.ts	Call on startup.
2.4	Seed Rooms	Add initial room data.	npm install uuid @types/uuid && echo 'import db from "./db"; import { v4 as uuidv4 } from "uuid"; export function seedRooms() { const rooms = [ ...Array(8).fill(0).map((_, i) => ({ id: `P1-R${i + 1}`, property: "P1", rates: JSON.stringify({ day: 100, week: 500, month: 2000 }) })), ...Array(10).fill(0).map((_, i) => ({ id: `P2-R${i + 1}`, property: "P2", rates: JSON.stringify({ day: 60, week: 300, month: 1200 }) })), ]; const stmt = db.prepare("INSERT OR IGNORE INTO rooms (id, property, rates) VALUES (?, ?, ?)"); rooms.forEach(room => stmt.run(room.id, room.property, room.rates)); }' > lib/seed.ts	Seeds 8 rooms for P1, 10 for P2.
3	Install next-auth	Install authentication library.	npm install next-auth bcrypt @types/bcrypt	Supports user roles (admin, managers, helpers).
3.1	Configure next-auth	Set up authentication provider.	echo 'import NextAuth from "next-auth"; import CredentialsProvider from "next-auth/providers/credentials"; import bcrypt from "bcrypt"; import db from "../../../lib/db"; export default NextAuth({ providers: [ CredentialsProvider({ name: "Credentials", credentials: { username: { label: "Username", type: "text" }, password: { label: "Password", type: "password" } }, async authorize(credentials) { if (!credentials?.username || !credentials?.password) return null; const user = db.prepare("SELECT * FROM users WHERE username = ?").get(credentials.username); if (user && await bcrypt.compare(credentials.password, user.password)) { return { id: user.id, username: user.username, role: user.role, property: user.property }; } return null; } }) ], callbacks: { async session({ session, token }) { if (token) { session.user.id = token.id as string; session.user.role = token.role as string; session.user.property = token.property as string; } return session; }, async jwt({ token, user }) { if (user) { token.id = user.id; token.role = user.role; token.property = user.property; } return token; } }, secret: process.env.NEXTAUTH_SECRET });' > pages/api/auth/[...nextauth].ts	Uses credentials for simplicity.
3.2	Set Environment Variables	Add next-auth secret.	echo 'NEXTAUTH_SECRET=your-secret-here' >> .env	Generate secret with `openssl rand -base64 32`.
3.3	Seed Users	Add initial users.	echo 'import bcrypt from "bcrypt"; import { v4 as uuidv4 } from "uuid"; import db from "./db"; export async function seedUsers() { const users = [ { id: uuidv4(), username: "admin", password: "admin123", role: "admin", property: null }, { id: uuidv4(), username: "p1_manager", password: "p1pass", role: "manager", property: "P1" }, { id: uuidv4(), username: "p2_manager", password: "p2pass", role: "manager", property: "P2" }, { id: uuidv4(), username: "helper1", password: "help1pass", role: "helper", property: null } ]; const stmt = db.prepare("INSERT OR IGNORE INTO users (id, username, password, role, property) VALUES (?, ?, ?, ?, ?)"); for (const user of users) { const hashedPassword = await bcrypt.hash(user.password, 10); stmt.run(user.id, user.username, hashedPassword, user.role, user.property); } }' >> lib/seed.ts	Admin, P1/P2 managers, one helper.
3.4	Protect Routes	Create auth helper.	echo 'import { getServerSession } from "next-auth"; import { NextApiRequest, NextApiResponse } from "next"; export async function getSession(req: NextApiRequest, res: NextApiResponse) { const session = await getServerSession(req, res, {}); return session; }' > lib/auth.ts	Secures API routes.
3.5	Example Protected API	Create rooms API.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import { getSession } from "../../lib/auth"; import db from "../../lib/db"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { const session = await getSession(req, res); if (!session) return res.status(401).json({ error: "Unauthorized" }); if (session.user.role === "admin") { const rooms = db.prepare("SELECT * FROM rooms").all(); return res.status(200).json(rooms); } if (session.user.role === "manager") { const rooms = db.prepare("SELECT * FROM rooms WHERE property = ?").all(session.user.property); return res.status(200).json(rooms); } return res.status(403).json({ error: "Forbidden" }); }' > pages/api/rooms.ts	Admin sees all rooms; managers see their property.
4.1	Bookings API	Create bookings endpoint.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import { getSession } from "../../lib/auth"; import db from "../../lib/db"; import { v4 as uuidv4 } from "uuid"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { const session = await getSession(req, res); if (!session || (session.user.role !== "admin" && session.user.role !== "manager")) { return res.status(403).json({ error: "Forbidden" }); } if (req.method === "POST") { const { roomId, guestId, plan, startDate, endDate } = req.body; const start = new Date(startDate); const end = new Date(endDate); const days = (end.getTime() - start.getTime()) / (1000 * 3600 * 24); if (days < 30 && plan !== "month") { return res.status(400).json({ error: "Bookings must be 30+ days per Honolulu Bill 41" }); } const id = uuidv4(); db.prepare("INSERT INTO bookings (id, roomId, guestId, plan, startDate, endDate, paymentStatus) VALUES (?, ?, ?, ?, ?, ?, ?)").run(id, roomId, guestId, plan, startDate, endDate, "pending"); return res.status(201).json({ id }); } }' > pages/api/bookings.ts	Enforces 30+ day stays.
4.2	Payments API	Create payments endpoint.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import { getSession } from "../../lib/auth"; import db from "../../lib/db"; import { v4 as uuidv4 } from "uuid"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { const session = await getSession(req, res); if (!session || (session.user.role !== "admin" && session.user.role !== "manager")) { return res.status(403).json({ error: "Forbidden" }); } if (req.method === "POST") { const { bookingId, amount, method, dateReceived, transactionId, notes } = req.body; const id = uuidv4(); db.prepare("INSERT INTO payments (id, bookingId, amount, method, dateReceived, transactionId, notes) VALUES (?, ?, ?, ?, ?, ?, ?)").run(id, bookingId, amount, method, dateReceived, transactionId, notes); db.prepare("UPDATE bookings SET paymentStatus = ? WHERE id = ?").run("paid", bookingId); return res.status(201).json({ id }); } }' > pages/api/payments.ts	Links payments to bookings.
4.3	Door Codes API	Create codes endpoint.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import { getSession } from "../../lib/auth"; import db from "../../lib/db"; import crypto from "crypto"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { const session = await getSession(req, res); if (!session || (session.user.role !== "admin" && session.user.role !== "manager")) { return res.status(403).json({ error: "Forbidden" }); } if (req.method === "POST") { const { roomId, bookingId, duration } = req.body; const booking = db.prepare("SELECT * FROM bookings WHERE id = ? AND paymentStatus = ?").get(bookingId, "paid"); const room = db.prepare("SELECT * FROM rooms WHERE id = ? AND cleaningStatus = ? AND linenStatus = ?").get(roomId, "clean", "fresh"); if (!booking || !room) { return res.status(400).json({ error: "Payment or cleaning incomplete" }); } const code = crypto.randomInt(1000, 9999).toString(); const frontDoorCode = room.property === "P1" ? crypto.randomInt(1000, 9999).toString() : crypto.randomInt(1000, 9999).toString(); const expiry = new Date(); if (duration === "day") expiry.setDate(expiry.getDate() + 2); else if (duration === "week") expiry.setDate(expiry.getDate() + 10); else expiry.setDate(expiry.getDate() + 35); db.prepare("UPDATE rooms SET code = ?, frontDoorCode = ?, codeExpiry = ? WHERE id = ?").run(code, frontDoorCode, expiry.toISOString(), roomId); db.prepare("UPDATE bookings SET code = ?, frontDoorCode = ? WHERE id = ?").run(code, frontDoorCode, bookingId); return res.status(200).json({ code, frontDoorCode, expiry }); } }' > pages/api/codes.ts	Generates room and front door codes.
4.4	Cleaning API	Create cleaning endpoint.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import { getSession } from "../../lib/auth"; import db from "../../lib/db"; import { v4 as uuidv4 } from "uuid"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { const session = await getSession(req, res); if (!session) return res.status(403).json({ error: "Forbidden" }); if (req.method === "POST") { const { roomId, type, date, cleaner, status } = req.body; const id = uuidv4(); db.prepare("INSERT INTO cleaning (id, roomId, type, date, cleaner, status) VALUES (?, ?, ?, ?, ?, ?)").run(id, roomId, type, date, cleaner, status); if (type === "room") { db.prepare("UPDATE rooms SET cleaningStatus = ?, linenStatus = ? WHERE id = ?").run("clean", "fresh", roomId); } return res.status(201).json({ id }); } }' > pages/api/cleaning.ts	Handles room and common area cleaning.
4.5	Reporting API	Create reports endpoint.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import { getSession } from "../../lib/auth"; import db from "../../lib/db"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { const session = await getSession(req, res); if (!session || session.user.role !== "admin") { return res.status(403).json({ error: "Forbidden" }); } if (req.method === "GET") { const lowSupplies = db.prepare("SELECT * FROM inventory WHERE quantity <= threshold").all(); const repairs = db.prepare("SELECT * FROM maintenance WHERE status = ?").all("open"); return res.status(200).json({ lowSupplies, repairs }); } }' > pages/api/reports.ts	Admin-only low supplies and repairs.
5.1	Inquiry Form	Create membership page.	echo 'import { useState } from "react"; import { useRouter } from "next/router"; export default function Membership() { const [form, setForm] = useState({ name: "", contact: "", referral: "", plan: "month" }); const router = useRouter(); const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); const res = await fetch("/api/inquiries", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(form) }); if (res.ok) { const { trackerLink } = await res.json(); router.push(trackerLink); } }; return ( <div> <h1>Honolulu Private Residency Club</h1> <form onSubmit={handleSubmit}> <input type="text" value={form.name} onChange={e => setForm({ ...form, name: e.target.value })} placeholder="Name" required /> <input type="text" value={form.contact} onChange={e => setForm({ ...form, contact: e.target.value })} placeholder="Contact" required /> <input type="text" value={form.referral} onChange={e => setForm({ ...form, referral: e.target.value })} placeholder="Referral Source" required /> <select value={form.plan} onChange={e => setForm({ ...form, plan: e.target.value })}> <option value="month">Monthly ($2000/$1200)</option> <option value="week">Weekly ($500/$300)</option> <option value="day">Daily ($100/$60)</option> </select> <button type="submit">Apply</button> </form> </div> ); }' > pages/membership.tsx	Public page for inquiries.
5.2	Inquiries API	Create inquiries endpoint.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import db from "../../lib/db"; import { v4 as uuidv4 } from "uuid"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { if (req.method === "POST") { const { name, contact, referral, plan } = req.body; const id = uuidv4(); const trackerLink = `/tracker/${id}`; const expiry = new Date(); expiry.setDate(expiry.getDate() + 7); db.prepare("INSERT INTO inquiries (id, name, contact, referralSource, plan, status, trackerLink, linkExpiry) VALUES (?, ?, ?, ?, ?, ?, ?, ?)").run(id, name, contact, referral, plan, "received", trackerLink, expiry.toISOString()); return res.status(201).json({ trackerLink }); } }' > pages/api/inquiries.ts	Generates temporary tracker link.
5.3	Tracker Page	Create tracker page.	echo 'import { GetServerSideProps } from "next"; import db from "../../lib/db"; type TrackerProps = { status: string; code?: string; frontDoorCode?: string; }; export default function Tracker({ status, code, frontDoorCode }: TrackerProps) { const steps = [ { name: "Request Received", completed: status !== "received" }, { name: "Payment Confirmed", completed: status === "paid" || status === "confirmed" }, { name: "Booking Confirmed", completed: status === "confirmed" } ]; return ( <div> <h1>Membership Status</h1> <div style={{ display: "flex", justifyContent: "space-between" }}> {steps.map((step, i) => ( <div key={i} style={{ color: step.completed ? "green" : "gray" }}> {step.name} </div> ))} </div> {status === "confirmed" && ( <div> <p>Room Code: {code}</p> <p>Front Door Code: {frontDoorCode}</p> </div> )} </div> ); } export const getServerSideProps: GetServerSideProps = async ({ params }) => { const inquiry = db.prepare("SELECT * FROM inquiries WHERE id = ?").get(params?.id); if (!inquiry || new Date(inquiry.linkExpiry) < new Date()) { return { notFound: true }; } if (inquiry.status === "confirmed") { const booking = db.prepare("SELECT * FROM bookings WHERE guestId = (SELECT id FROM guests WHERE contact = ?)").get(inquiry.contact); return { props: { status: inquiry.status, code: booking?.code, frontDoorCode: booking?.frontDoorCode } }; } return { props: { status: inquiry.status } }; };' > pages/tracker/[id].tsx	Shows request status and codes.
6.1	Install Twilio	Install Twilio for SMS.	npm install twilio @types/twilio	Adds secure code delivery.
6.2	Configure Twilio	Add Twilio credentials to .env.	echo 'TWILIO_ACCOUNT_SID=your-sid\nTWILIO_AUTH_TOKEN=your-token\nTWILIO_PHONE_NUMBER=your-number' >> .env	Get credentials from Twilio dashboard.
6.3	Send SMS	Create SMS utility.	echo 'import Twilio from "twilio"; const client = Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); export async function sendSMS(to: string, body: string) { await client.messages.create({ body, from: process.env.TWILIO_PHONE_NUMBER, to }); }' > lib/sms.ts	Sends codes to guests.
6.4	Integrate SMS	Call sendSMS in codes API.	Add to pages/api/codes.ts: `import { sendSMS } from "../../lib/sms"; ... await sendSMS(booking.guestContact, `Your room code is ${code}, front door code is ${frontDoorCode}, expires ${expiry}`);`	Delivers codes after generation.
7.1	Dashboard Page	Create CRM dashboard.	echo 'import { useSession } from "next-auth/react"; import { useEffect, useState } from "react"; export default function Dashboard() { const { data: session } = useSession(); const [rooms, setRooms] = useState([]); useEffect(() => { if (session) { fetch("/api/rooms").then(res => res.json()).then(setRooms); } }, [session]); if (!session) return <div>Please log in</div>; return ( <div> <h1>STR Dashboard</h1> <table> <thead><tr><th>Room</th><th>Code</th><th>Payment</th><th>Cleaning</th><th>Linen</th></tr></thead> <tbody> {rooms.map(room => ( <tr key={room.id}> <td>{room.id}</td> <td>{room.code}</td> <td>{room.paymentStatus}</td> <td>{room.cleaningStatus}</td> <td>{room.linenStatus}</td> </tr> ))} </tbody> </table> </div> ); }' > pages/dashboard.tsx	Shows room status (admin: all; managers: their property).
7.2	Add CSS	Add basic styling.	echo 'body { font-family: Arial; } table { border-collapse: collapse; width: 100%; } th, td { border: 1px solid #ddd; padding: 8px; text-align: left; } th { background-color: #f2f2f2; }' > styles/globals.css	Improves UI readability.
8	Deploy to Replit	Ensure app runs and is hosted.	Click Replit’s “Run” button.	Replit hosts at a public URL. Free tier limits storage to 500 MB.