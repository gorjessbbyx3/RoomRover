Step Number	Objective	Action	Code/Command	Notes
1.1	Install Tailwind CSS	Install Tailwind and dependencies for responsive design.	npm install tailwindcss @tailwindcss/forms postcss autoprefixer && npx tailwindcss init -p	Ensures responsive layouts for mobile screens.
1.2	Configure Tailwind	Update tailwind.config.js.	echo 'module.exports = { content: ["./pages/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}"], theme: { extend: {} }, plugins: [require("@tailwindcss/forms")] };' > tailwind.config.js	Including @tailwindcss/forms for better form styling.
1.3	Apply Tailwind CSS	Replace globals.css with Tailwind styles.	echo '@tailwind base; @tailwind components; @tailwind utilities; body { font-family: Arial, sans-serif; }' > styles/globals.css	Applies Tailwind’s utility classes globally.
1.4	Update Dashboard	Make dashboard responsive with Tailwind.	echo 'import { useSession } from "next-auth/react"; import { useEffect, useState } from "react"; export default function Dashboard() { const { data: session } = useSession(); const [rooms, setRooms] = useState([]); const [alerts, setAlerts] = useState([]); useEffect(() => { if (session) { fetch("/api/rooms").then(res => res.json()).then(setRooms); fetch("/api/compliance").then(res => res.json()).then(data => setAlerts(data.violations)); } }, [session]); if (!session) return <div className="p-4 text-center">Please log in</div>; return ( <div className="p-4 max-w-4xl mx-auto"> <h1 className="text-2xl font-bold mb-4">STR Dashboard</h1> {alerts.length > 0 && ( <div className="bg-red-100 text-red-700 p-4 rounded mb-4"> <h2 className="text-lg font-semibold">Compliance Alerts</h2> <ul className="list-disc pl-5"> {alerts.map(alert => ( <li key={alert.id}>{alert.message}</li> ))} </ul> </div> )} <div className="overflow-x-auto"> <table className="w-full border-collapse text-sm"> <thead> <tr className="bg-gray-100"> <th className="border p-2">Room</th> <th className="border p-2">Code</th> <th className="border p-2">Payment</th> <th className="border p-2">Cleaning</th> <th className="border p-2">Linen</th> </tr> </thead> <tbody> {rooms.map(room => ( <tr key={room.id}> <td className="border p-2">{room.id}</td> <td className="border p-2">{room.code}</td> <td className="border p-2">{room.paymentStatus}</td> <td className="border p-2">{room.cleaningStatus}</td> <td className="border p-2">{room.linenStatus}</td> </tr> ))} </tbody> </table> </div> </div> ); }' > pages/dashboard.tsx	Uses Tailwind for responsive table and alerts.
1.5	Update Membership Page	Make membership page mobile-friendly.	echo 'import { useState } from "react"; import { useRouter } from "next/router"; export default function Membership() { const [form, setForm] = useState({ name: "", contact: "", referral: "", plan: "month" }); const router = useRouter(); const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); const res = await fetch("/api/inquiries", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(form) }); if (res.ok) { const { trackerLink } = await res.json(); router.push(trackerLink); } }; return ( <div className="p-4 max-w-md mx-auto"> <h1 className="text-2xl font-bold mb-4">Honolulu Private Residency Club</h1> <form onSubmit={handleSubmit} className="space-y-4"> <input type="text" value={form.name} onChange={e => setForm({ ...form, name: e.target.value })} placeholder="Name" className="w-full p-2 border rounded" required /> <input type="text" value={form.contact} onChange={e => setForm({ ...form, contact: e.target.value })} placeholder="Contact" className="w-full p-2 border rounded" required /> <input type="text" value={form.referral} onChange={e => setForm({ ...form, referral: e.target.value })} placeholder="Referral Source" className="w-full p-2 border rounded" required /> <select value={form.plan} onChange={e => setForm({ ...form, plan: e.target.value })} className="w-full p-2 border rounded"> <option value="month">Monthly ($2000/$1200) - Recommended</option> <option value="week">Weekly ($500/$300)</option> <option value="day">Daily ($100/$60)</option> </select> <button type="submit" className="w-full p-2 bg-blue-500 text-white rounded">Apply</button> </form> </div> ); }' > pages/membership.tsx	Optimizes form for mobile with Tailwind.
2.1	Install Workbox	Install Workbox for offline support.	npm install workbox-precaching workbox-routing workbox-strategies	Enables offline access for managers/helpers.
2.2	Create Service Worker	Add service worker for caching.	echo 'import { precacheAndRoute } from "workbox-precaching"; import { registerRoute } from "workbox-routing"; import { StaleWhileRevalidate } from "workbox-strategies"; precacheAndRoute(self.__WB_MANIFEST); registerRoute( ({ url }) => url.pathname.startsWith("/api/"), new StaleWhileRevalidate({ cacheName: "api-cache" }) ); registerRoute( ({ url }) => url.pathname.endsWith(".css") || url.pathname.endsWith(".js"), new StaleWhileRevalidate({ cacheName: "static-resources" }) );' > public/assets/sw.js	Supports offline CRM dashboard access.
2.3	Register Service Worker	Add to _app.jsx for client-side registration.	echo 'import type { AppProps } from "next/app"; import { useEffect } from "react"; import "../styles/globals.css"; export default function App({ Component, pageProps }: AppProps) { useEffect(() => { if ("serviceWorker" in navigator) { navigator.serviceWorker.register("/sw.js").catch(err => console.error("Service Worker registration failed:", err)); } }, []); return <Component {...pageProps} />; }' > pages/_app.jsx	Ensures service worker runs on mobile browsers.
2.4	Update next.config.js	Configure Webpack for service worker.	echo 'module.exports = { reactStrictMode: true, webpack(config) { config.module.rules.push({ include: [/public\/assets\/sw\.js/], type: "asset" }); return config; } };' > next.config.js	Integrates service worker with Next.js build.
3.1	Create Navbar Component	Create mobile-friendly navigation.  echo 'import { useSession, signIn, signOut } from "next-auth/react"; import Link from "next/link"; export default function Navbar() { const { data: session } = useSession(); return ( <nav className="bg-gray-900 text-white dark:bg-gray-900 dark:text-gray-100 p-4"> <div className="flex justify-between items-center"> <Link href="/" className="text-lg font-bold">STR CRM</Link> <div className="md:hidden"> <button onClick={() => document.getElementById("menu")?.classList.toggle("hidden")} className="focus:outline-none">☰</button> </div> </div> <div id="menu" className="hidden md:flex md:space-x-4 mt-2 md:mt-0"> {session && ( <> <Link href="/dashboard" className="block p-2 hover:bg-gray-700">Dashboard</Link> {(session.user.role === "admin" || session.user.role === "manager") && ( <Link href="/bookings" className="block p-2 hover:bg-gray-700">Bookings</Link> )} {(session.user.role === "admin" || session.user.role === "manager" || session.user.role === "helper") && ( <Link href="/cleaning" className="block p-2 hover:bg-gray-700">Cleaning</Link> )} {session.user.role === "admin" && ( <Link href="/reports" className="block p-2 hover:bg-gray-700">Reports</Link> )} <button onClick={() => signOut()} className="block p-2 hover:bg-gray-700">Logout</button> </> )} {!session && ( <button onClick={() => signIn()} className="block p-2 hover:bg-gray-700">Login</button> )} </div> </nav> ); }' > components/Navbar.tsx	Hamburger menu for mobile navigation.
3.2	Integrate Navbar	Add Navbar to _app.tsx.	sed -i 's/return <Component {...pageProps} \/>;/import Navbar from ".\/components\/Navbar";\n\nreturn (<>\n  <Navbar \/>\n  <Component {...pageProps} \/>\n<\/>);/' pages/_app.tsx	Adds navigation to all pages.
4.1	Increase Touch Target Sizes	Update buttons in membership form.	sed -i 's/<button type="submit" className="w-full p-2/<button type="submit" className="w-full p-3 text-lg/' pages/membership.tsx	Larger buttons for easier tapping.
4.2	Add Tap Feedback	Add hover/tap effects to buttons.	sed -i 's/<button type="submit" className="w-full p-3 text-lg bg-blue-500 text-white rounded"/<button type="submit" className="w-full p-3 text-lg bg-blue-500 text-white rounded hover:bg-blue-600 active:bg-blue-700"/' pages/membership.tsx	Visual feedback improves UX.
5.1	Optimize Images	Add placeholder images with lazy loading.	echo '<img