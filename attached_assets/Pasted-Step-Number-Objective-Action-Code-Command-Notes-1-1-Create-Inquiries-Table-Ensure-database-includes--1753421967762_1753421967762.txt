Step Number	Objective	Action	Code/Command	Notes
1.1	Create Inquiries Table	Ensure database includes inquiries table for tracker data.	Add to lib/initDb.ts: `db.exec(\`CREATE TABLE IF NOT EXISTS inquiries (id TEXT PRIMARY KEY, name TEXT, contact TEXT, referralSource TEXT, plan TEXT, status TEXT, trackerLink TEXT, linkExpiry TEXT)\`);`	Already in main guide; ensures storage for tracker links.
1.2	Seed Initial Data	Verify UUID dependency for unique tracker IDs.	npm install uuid @types/uuid	Required for generating inquiry IDs.
2.1	Create Membership Page	Implement inquiry form for new members.	echo 'import { useState } from "react"; import { useRouter } from "next/router"; export default function Membership() { const [form, setForm] = useState({ name: "", contact: "", referral: "", plan: "month" }); const router = useRouter(); const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); const res = await fetch("/api/inquiries", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(form) }); if (res.ok) { const { trackerLink } = await res.json(); router.push(trackerLink); } }; return ( <div className="p-4 max-w-md mx-auto"> <h1 className="text-2xl font-bold mb-4">Honolulu Private Residency Club</h1> <form onSubmit={handleSubmit} className="space-y-4"> <input type="text" value={form.name} onChange={e => setForm({ ...form, name: e.target.value })} placeholder="Name" className="w-full p-2 border rounded" required /> <input type="text" value={form.contact} onChange={e => setForm({ ...form, contact: e.target.value })} placeholder="Contact" className="w-full p-2 border rounded" required /> <input type="text" value={form.referral} onChange={e => setForm({ ...form, referral: e.target.value })} placeholder="Referral Source" className="w-full p-2 border rounded" required /> <select value={form.plan} onChange={e => setForm({ ...form, plan: e.target.value })} className="w-full p-2 border rounded"> <option value="month">Monthly ($2000/$1200) - Recommended</option> <option value="week">Weekly ($500/$300)</option> <option value="day">Daily ($100/$60)</option> </select> <button type="submit" className="w-full p-3 text-lg bg-blue-500 text-white rounded hover:bg-blue-600 active:bg-blue-700">Apply</button> </form> </div> ); }' > pages/membership.tsx	Form collects inquiry data; redirects to tracker link. Uses Tailwind for mobile optimization.
2.2	Create Inquiries API	Handle inquiry submissions and generate tracker links.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import db from "../../lib/db"; import { v4 as uuidv4 } from "uuid"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { if (req.method === "POST") { const { name, contact, referral, plan } = req.body; const id = uuidv4(); const trackerLink = `/tracker/${id}`; const expiry = new Date(); expiry.setDate(expiry.getDate() + 7); db.prepare("INSERT INTO inquiries (id, name, contact, referralSource, plan, status, trackerLink, linkExpiry) VALUES (?, ?, ?, ?, ?, ?, ?, ?)").run(id, name, contact, referral, plan, "received", trackerLink, expiry.toISOString()); return res.status(201).json({ trackerLink }); } }' > pages/api/inquiries.ts	Creates inquiry with 7-day expiring tracker link.
3.1	Create Tracker Page	Display tracker statuses and codes.	echo 'import { GetServerSideProps } from "next"; import db from "../../lib/db"; type TrackerProps = { status: string; code?: string; frontDoorCode?: string; warning?: string }; export default function Tracker({ status, code, frontDoorCode, warning }: TrackerProps) { const steps = [ { name: "Request Received", completed: status !== "received" }, { name: "Payment Confirmed", completed: status === "paid" || status === "confirmed" }, { name: "Booking Confirmed", completed: status === "confirmed" } ]; return ( <div className="p-4 max-w-md mx-auto"> <h1 className="text-2xl font-bold mb-4">Membership Status</h1> {warning && <p className="text-red-700 mb-4">{warning}</p>} <div className="flex flex-col space-y-4"> {steps.map((step, i) => ( <div key={i} className="flex items-center"> <span className={\`w-6 h-6 rounded-full mr-2 \${step.completed ? "bg-green-500" : "bg-gray-300"}\`}></span> <span className={\`text-lg \${step.completed ? "text-green-700" : "text-gray-500"}\`}>{step.name}</span> </div> ))} </div> {status === "confirmed" && ( <div className="mt-4 p-4 bg-gray-100 rounded"> <p className="text-lg">Room Code: <strong>{code}</strong></p> <p className="text-lg">Front Door Code: <strong>{frontDoorCode}</strong></p> </div> )} </div> ); } export const getServerSideProps: GetServerSideProps = async ({ params }) => { const inquiry = db.prepare("SELECT * FROM inquiries WHERE id = ?").get(params?.id); if (!inquiry || new Date(inquiry.linkExpiry) < new Date()) { return { notFound: true }; } if (inquiry.status === "confirmed") { const booking = db.prepare("SELECT * FROM bookings WHERE guestId = (SELECT id FROM guests WHERE contact = ?)").get(inquiry.contact); if (booking && (new Date(booking.endDate).getTime() - new Date(booking.startDate).getTime()) / (1000 * 3600 * 24) < 30 && booking.plan !== "month") { return { props: { status: inquiry.status, warning: "Booking under 30 days may not comply with local regulations" } }; } return { props: { status: inquiry.status, code: booking?.code, frontDoorCode: booking?.frontDoorCode } }; } return { props: { status: inquiry.status } }; };' > pages/tracker/[id].tsx	Shows Dominoâ€™s-style progress with codes on confirmation. Includes Bill 41 compliance warning.
3.2	Add Tracker Styling	Ensure tracker is mobile-friendly with Tailwind.	Ensure tailwind.config.js includes: `content: ["./pages/**/*.{ts,tsx}"]`	Already set in mobile optimization guide; confirms responsive design.
4.1	Create Admin Inquiry Management API	Allow admin to update inquiry statuses.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import { getSession } from "../../lib/auth"; import db from "../../lib/db"; import { v4 as uuidv4 } from "uuid"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { const session = await getSession(req, res); if (!session || session.user.role !== "admin") { return res.status(403).json({ error: "Forbidden" }); } if (req.method === "PUT") { const { id, status, bookingId } = req.body; db.prepare("UPDATE inquiries SET status = ? WHERE id = ?").run(status, id); if (status === "confirmed" && bookingId) { const booking = db.prepare("SELECT * FROM bookings WHERE id = ?").get(bookingId); if (booking) { const guestId = uuidv4(); db.prepare("INSERT INTO guests (id, name, contact, referralSource) VALUES (?, ?, ?, ?)").run(guestId, db.prepare("SELECT name FROM inquiries WHERE id = ?").get(id).name, db.prepare("SELECT contact FROM inquiries WHERE id = ?").get(id).contact, db.prepare("SELECT referralSource FROM inquiries WHERE id = ?").get(id).referralSource); db.prepare("UPDATE bookings SET guestId = ? WHERE id = ?").run(guestId, bookingId); } } return res.status(200).json({ message: "Inquiry updated" }); } if (req.method === "GET") { const inquiries = db.prepare("SELECT * FROM inquiries").all(); return res.status(200).json(inquiries); } }' > pages/api/inquiries/[id].ts	Enables admin to mark inquiries as received, paid, or confirmed.
4.2	Add Admin Inquiry Page	Create page for admin to manage inquiries.	echo 'import { useSession } from "next-auth/react"; import { useEffect, useState } from "react"; export default function Inquiries() { const { data: session } = useSession(); const [inquiries, setInquiries] = useState([]); useEffect(() => { if (session) { fetch("/api/inquiries").then(res => res.json()).then(setInquiries); } }, [session]); if (!session || session.user.role !== "admin") return <div className="p-4 text-center">Access denied</div>; const updateStatus = async (id: string, status: string, bookingId?: string) => { const res = await fetch(`/api/inquiries/${id}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ id, status, bookingId }) }); if (res.ok) { setInquiries(inquiries.map(i => i.id === id ? { ...i, status } : i)); } }; return ( <div className="p-4 max-w-4xl mx-auto"> <h1 className="text-2xl font-bold mb-4">Manage Inquiries</h1> <table className="w-full border-collapse text-sm"> <thead> <tr className="bg-gray-100"> <th className="border p-2">Name</th> <th className="border p-2">Contact</th> <th className="border p-2">Plan</th> <th className="border p-2">Status</th> <th className="border p-2">Actions</th> </tr> </thead> <tbody> {inquiries.map(inquiry => ( <tr key={inquiry.id}> <td className="border p-2">{inquiry.name}</td> <td className="border p-2">{inquiry.contact}</td> <td className="border p-2">{inquiry.plan}</td> <td className="border p-2">{inquiry.status}</td> <td className="border p-2"> <button onClick={() => updateStatus(inquiry.id, "received")} className="p-1 bg-blue-500 text-white rounded mr-1">Received</button> <button onClick={() => updateStatus(inquiry.id, "paid")} className="p-1 bg-green-500 text-white rounded mr-1">Paid</button> <button onClick={() => updateStatus(inquiry.id, "confirmed", "booking-id-here")} className="p-1 bg-purple-500 text-white rounded">Confirm</button> </td> </tr> ))} </tbody> </table> </div> ); }' > pages/inquiries.tsx	Admin interface to update tracker statuses.
4.3	Integrate Inquiries Page	Add inquiries link to navbar.	sed -i 's/<Link href="\/reports" className="block p-2 hover:bg-gray-700">Reports<\/Link>/<Link href="\/reports" className="block p-2 hover:bg-gray-700">Reports<\/Link>\n<Link href="\/inquiries" className="block p-2 hover:bg-gray-700">Inquiries<\/Link>/' components/Navbar.tsx	Adds admin access to inquiries page.
5.1	Secure Tracker Links	Validate tracker link expiry and access.	Already in pages/tracker/[id].tsx: `if (!inquiry || new Date(inquiry.linkExpiry) < new Date()) { return { notFound: true }; }`	Ensures links expire after 7 days for discretion.
5.2	Add Compliance Check	Include Bill 41 compliance warning in tracker.	Already in pages/tracker/[id].tsx: `if (booking && (new Date(booking.endDate).getTime() - new Date(booking.startDate).getTime()) / (1000 * 3600 * 24) < 30 && booking.plan !== "month") { return { props: { status: inquiry.status, warning: "Booking under 30 days may not comply with local regulations" } }; }`	Warns guests of non-compliant bookings.
6.1	Integrate Twilio SMS	Notify guests of tracker updates via SMS.	npm install twilio @types/twilio && echo 'import Twilio from "twilio"; const client = Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); export async function sendSMS(to: string, body: string) { await client.messages.create({ body, from: process.env.TWILIO_PHONE_NUMBER, to }); }' > lib/sms.ts && echo 'TWILIO_ACCOUNT_SID=your-sid\nTWILIO_AUTH_TOKEN=your-token\nTWILIO_PHONE_NUMBER=your-number' >> .env	Requires Twilio account ($15 trial credit).
6.2	Send SMS on Status Update	Add SMS in inquiries API.	Add to pages/api/inquiries/[id].ts: `import { sendSMS } from "../../lib/sms"; if (status === "confirmed") { await sendSMS(inquiry.contact, `Your booking is confirmed! Check your tracker: ${process.env.NEXT_PUBLIC_BASE_URL}${inquiry.trackerLink}`); } else if (status === "paid") { await sendSMS(inquiry.contact, `Payment confirmed! Awaiting booking confirmation: ${process.env.NEXT_PUBLIC_BASE_URL}${inquiry.trackerLink}`); }`	Add `NEXT_PUBLIC_BASE_URL=https://your-repl.repl.co` to .env. Sends SMS for paid/confirmed statuses.