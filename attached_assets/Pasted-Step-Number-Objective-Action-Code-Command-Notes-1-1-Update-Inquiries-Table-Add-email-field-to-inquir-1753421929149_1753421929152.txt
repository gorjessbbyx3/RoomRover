Step Number	Objective	Action	Code/Command	Notes
1.1	Update Inquiries Table	Add email field to inquiries table for blocking.	sed -i 's/db.exec(\`CREATE TABLE IF NOT EXISTS inquiries (.*)\`);/db.exec(\`CREATE TABLE IF NOT EXISTS inquiries (id TEXT PRIMARY KEY, name TEXT, contact TEXT, email TEXT, referralSource TEXT, plan TEXT, status TEXT, trackerLink TEXT, linkExpiry TEXT)\`);/' lib/initDb.ts	Adds email to support banned list checks.
1.2	Create Master Codes Table	Add table for master door codes.	Add to lib/initDb.ts: `db.exec(\`CREATE TABLE IF NOT EXISTS master_codes (id TEXT PRIMARY KEY, property TEXT, masterCode TEXT, lastUpdated TEXT, notes TEXT)\`);`	Stores master codes for admin/manager reference.
1.3	Create Banned List Table	Add table for banned individuals.	Add to lib/initDb.ts: `db.exec(\`CREATE TABLE IF NOT EXISTS banned_list (id TEXT PRIMARY KEY, name TEXT, phone TEXT, email TEXT, reason TEXT, bannedDate TEXT)\`);`	Tracks banned individuals with reasons.
2.1	Update Membership Form	Add email field to inquiry form.	sed -i 's/const \[form, setForm\] = useState({ name: "", contact: "", referral: "", plan: "month" });/const [form, setForm] = useState({ name: "", contact: "", email: "", referral: "", plan: "month" });/' pages/membership.tsx && sed -i 's/<input type="text" value={form.referral}/<input type="email" value={form.email} onChange={e => setForm({ ...form, email: e.target.value })} placeholder="Email" className="w-full p-2 border rounded" required />\n<input type="text" value={form.referral}/' pages/membership.tsx && sed -i 's/const res = await fetch("\/api\/inquiries", { method: "POST"/const res = await fetch("\/api\/inquiries", { method: "POST", headers: { "Content-Type": "application\/json" }, body: JSON.stringify(form) }); if (res.ok) { const { trackerLink, error } = await res.json(); if (error) { alert(error); return; }/' pages/membership.tsx	Adds email input; shows error if blocked.
2.2	Update Inquiries API	Check banned list and support canceled status.	sed -i 's/const { name, contact, referral, plan } = req.body;/const { name, contact, email, referral, plan } = req.body; const banned = db.prepare("SELECT * FROM banned_list WHERE name = ? OR phone = ? OR email = ?").get(name, contact, email); if (banned) { return res.status(400).json({ error: "Your request is blocked due to a prior issue. Please contact support." }); }/' pages/api/inquiries.ts && sed -i 's/INSERT INTO inquiries (id, name, contact, referralSource, plan, status, trackerLink, linkExpiry) VALUES (?, ?, ?, ?, ?, ?, ?, ?)/INSERT INTO inquiries (id, name, contact, email, referralSource, plan, status, trackerLink, linkExpiry) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)/' pages/api/inquiries.ts && sed -i 's/.run(id, name, contact, referral, plan, "received", trackerLink, expiry.toISOString());/.run(id, name, contact, email, referral, plan, "received", trackerLink, expiry.toISOString());/' pages/api/inquiries.ts	Blocks inquiries from banned individuals.
3.1	Update Tracker Page	Add canceled status display.	sed -i 's/const steps = \[/const steps = [{ name: "Request Received", completed: status !== "received" && status !== "canceled" }, { name: "Payment Confirmed", completed: status === "paid" || status === "confirmed" }, { name: "Booking Confirmed", completed: status === "confirmed" }]; return ( <div className="p-4 max-w-md mx-auto"> <h1 className="text-2xl font-bold mb-4">Membership Status</h1> {status === "canceled" && <p className="text-red-700 mb-4">Your request has been canceled. Please contact support.</p>} {warning && status !== "canceled" && <p className="text-red-700 mb-4">{warning}</p>} {status !== "canceled" && (/' pages/tracker/[id].tsx && sed -i 's/if (inquiry.status === "confirmed") {/if (inquiry.status === "canceled") { return { props: { status: "canceled" } }; } if (inquiry.status === "confirmed") {/' pages/tracker/[id].tsx	Shows "Request Canceled" in tracker.
4.1	Update Inquiries Management API	Add canceled status and SMS notifications.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import { getSession } from "../../lib/auth"; import db from "../../lib/db"; import { v4 as uuidv4 } from "uuid"; import { sendSMS } from "../../lib/sms"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { const { id } = req.query; const session = await getSession(req, res); if (!session || session.user.role !== "admin") { return res.status(403).json({ error: "Forbidden" }); } if (req.method === "PUT") { const { status, bookingId } = req.body; const inquiry = db.prepare("SELECT * FROM inquiries WHERE id = ?").get(id); db.prepare("UPDATE inquiries SET status = ? WHERE id = ?").run(status, id); if (status === "confirmed" && bookingId) { const booking = db.prepare("SELECT * FROM bookings WHERE id = ?").get(bookingId); if (booking) { const guestId = uuidv4(); db.prepare("INSERT INTO guests (id, name, contact, referralSource) VALUES (?, ?, ?, ?)").run(guestId, inquiry.name, inquiry.contact, inquiry.referralSource); db.prepare("UPDATE bookings SET guestId = ? WHERE id = ?").run(guestId, bookingId); await sendSMS(inquiry.contact, `Your booking is confirmed! Check your tracker: ${process.env.NEXT_PUBLIC_BASE_URL}${inquiry.trackerLink}`); } } else if (status === "paid") { await sendSMS(inquiry.contact, `Payment confirmed! Awaiting booking confirmation: ${process.env.NEXT_PUBLIC_BASE_URL}${inquiry.trackerLink}`); } else if (status === "canceled") { await sendSMS(inquiry.contact, `Your request has been canceled. Contact support: admin@residencyclub.com`); } return res.status(200).json({ message: "Inquiry updated" }); } if (req.method === "GET") { const inquiries = db.prepare("SELECT * FROM inquiries").all(); return res.status(200).json(inquiries); } }' > pages/api/inquiries/[id].ts	Supports canceled status; sends SMS notifications.
4.2	Update Admin Inquiries Page	Add canceled button.	sed -i 's/<button onClick={() => updateStatus(inquiry.id, "paid")/<button onClick={() => updateStatus(inquiry.id, "received") className="p-1 bg-blue-500 text-white rounded mr-1">Received</button> <button onClick={() => updateStatus(inquiry.id, "paid")/' pages/inquiries.tsx && sed -i 's/<button onClick={() => updateStatus(inquiry.id, "confirmed", "booking-id-here")/<button onClick={() => updateStatus(inquiry.id, "canceled") className="p-1 bg-red-500 text-white rounded mr-1">Cancel</button> <button onClick={() => updateStatus(inquiry.id, "confirmed", "booking-id-here")/' pages/inquiries.tsx	Adds cancel option for admin.
5.1	Create Master Codes API	Add endpoint for master codes.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import { getSession } from "../../lib/auth"; import db from "../../lib/db"; import { v4 as uuidv4 } from "uuid"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { const session = await getSession(req, res); if (!session || (session.user.role !== "admin" && session.user.role !== "manager")) { return res.status(403).json({ error: "Forbidden" }); } if (req.method === "POST") { const { property, masterCode, notes } = req.body; const id = uuidv4(); const lastUpdated = new Date().toISOString(); db.prepare("INSERT INTO master_codes (id, property, masterCode, lastUpdated, notes) VALUES (?, ?, ?, ?, ?)").run(id, property, masterCode, lastUpdated, notes); return res.status(201).json({ id }); } if (req.method === "GET") { const codes = session.user.role === "admin" ? db.prepare("SELECT * FROM master_codes").all() : db.prepare("SELECT * FROM master_codes WHERE property = ?").all(session.user.property); return res.status(200).json(codes); } }' > pages/api/master_codes.ts	Admin adds codes; managers view their propertyâ€™s code.
5.2	Create Master Codes Page	Add page for master code management.	echo 'import { useSession } from "next-auth/react"; import { useEffect, useState } from "react"; export default function MasterCodes() { const { data: session } = useSession(); const [codes, setCodes] = useState([]); const [form, setForm] = useState({ property: "P1", masterCode: "", notes: "" }); useEffect(() => { if (session) { fetch("/api/master_codes").then(res => res.json()).then(setCodes); } }, [session]); if (!session || (session.user.role !== "admin" && session.user.role !== "manager")) return <div className="p-4 text-center">Access denied</div>; const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); if (session.user.role !== "admin") return; const res = await fetch("/api/master_codes", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(form) }); if (res.ok) { setCodes([...codes, { ...form, id: (await res.json()).id }]); setForm({ property: "P1", masterCode: "", notes: "" }); } }; return ( <div className="p-4 max-w-md mx-auto"> <h1 className="text-2xl font-bold mb-4">Master Door Codes</h1> {session.user.role === "admin" && ( <form onSubmit={handleSubmit} className="space-y-4 mb-4"> <select value={form.property} onChange={e => setForm({ ...form, property: e.target.value })} className="w-full p-2 border rounded"> <option value="P1">Property 1</option> <option value="P2">Property 2</option> </select> <input type="text" value={form.masterCode} onChange={e => setForm({ ...form, masterCode: e.target.value })} placeholder="Master Code" className="w-full p-2 border rounded" required /> <input type="text" value={form.notes} onChange={e => setForm({ ...form, notes: e.target.value })} placeholder="Notes" className="w-full p-2 border rounded" /> <button type="submit" className="w-full p-3 text-lg bg-blue-500 text-white rounded hover:bg-blue-600">Add Code</button> </form> )} <table className="w-full border-collapse text-sm"> <thead> <tr className="bg-gray-100"> <th className="border p-2">Property</th> <th className="border p-2">Master Code</th> <th className="border p-2">Last Updated</th> <th className="border p-2">Notes</th> </tr> </thead> <tbody> {codes.map(code => ( <tr key={code.id}> <td className="border p-2">{code.property}</td> <td className="border p-2">{code.masterCode}</td> <td className="border p-2">{code.lastUpdated}</td> <td className="border p-2">{code.notes}</td> </tr> ))} </tbody> </table> </div> ); }' > pages/master_codes.tsx	Admin adds codes; managers view only.
5.3	Add Master Codes to Navbar	Add master codes link for admin/managers.	sed -i 's/<Link href="\/inquiries" className="block p-2 hover:bg-gray-700">Inquiries<\/Link>/<Link href="\/inquiries" className="block p-2 hover:bg-gray-700">Inquiries<\/Link>\n<Link href="\/master_codes" className="block p-2 hover:bg-gray-700">Master Codes<\/Link>/' components/Navbar.tsx	Accessible to admin and managers.
6.1	Create Banned List API	Add endpoint for banned list management.	echo 'import type { NextApiRequest, NextApiResponse } from "next"; import { getSession } from "../../lib/auth"; import db from "../../lib/db"; import { v4 as uuidv4 } from "uuid"; export default async function handler(req: NextApiRequest, res: NextApiResponse) { const session = await getSession(req, res); if (!session || session.user.role !== "admin") { return res.status(403).json({ error: "Forbidden" }); } if (req.method === "POST") { const { name, phone, email, reason } = req.body; const id = uuidv4(); const bannedDate = new Date().toISOString(); db.prepare("INSERT INTO banned_list (id, name, phone, email, reason, bannedDate) VALUES (?, ?, ?, ?, ?, ?)").run(id, name, phone, email, reason, bannedDate); return res.status(201).json({ id }); } if (req.method === "GET") { const banned = db.prepare("SELECT * FROM banned_list").all(); return res.status(200).json(banned); } }' > pages/api/banned_list.ts	Admin manages banned list.
6.2	Create Banned List Page	Add page for admin to manage banned individuals.	echo 'import { useSession } from "next-auth/react"; import { useEffect, useState } from "react"; export default function BannedList() { const { data: session } = useSession(); const [banned, setBanned] = useState([]); const [form, setForm] = useState({ name: "", phone: "", email: "", reason: "" }); useEffect(() => { if (session) { fetch("/api/banned_list").then(res => res.json()).then(setBanned); } }, [session]); if (!session || session.user.role !== "admin") return <div className="p-4 text-center">Access denied</div>; const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); const res = await fetch("/api/banned_list", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(form) }); if (res.ok) { setBanned([...banned, { ...form, id: (await res.json()).id }]); setForm({ name: "", phone: "", email: "", reason: "" }); } }; return ( <div className="p-4 max-w-md mx-auto"> <h1 className="text-2xl font-bold mb-4">Banned Individuals</h1> <form onSubmit={handleSubmit} className="space-y-4 mb-4"> <input type="text" value={form.name} onChange={e => setForm({ ...form, name: e.target.value })} placeholder="Full Name" className="w-full p-2 border rounded" /> <input type="tel" value={form.phone} onChange={e => setForm({ ...form, phone: e.target.value })} placeholder="Phone Number" className="w-full p-2 border rounded" /> <input type="email" value={form.email} onChange={e => setForm({ ...form, email: e.target.value })} placeholder="Email" className="w-full p-2 border rounded" /> <input type="text" value={form.reason} onChange={e => setForm({ ...form, reason: e.target.value })} placeholder="Reason for Ban" className="w-full p-2 border rounded" required /> <button type="submit" className="w-full p-3 text-lg bg-red-500 text-white rounded hover:bg-red-600">Add to Banned List</button> </form> <table className="w-full border-collapse text-sm"> <thead> <tr className="bg-gray-100"> <th className="border p-2">Name</th> <th className="border p-2">Phone</th> <th className="border p-2">Email</th> <th className="border p-2">Reason</th> <th className="border p-2">Banned Date</th> </tr> </thead> <tbody> {banned.map(person => ( <tr key={person.id}> <td className="border p-2">{person.name}</td> <td className="border p-2">{person.phone}</td> <td className="border p-2">{person.email}</td> <td className="border p-2">{person.reason}</td> <td className="border p-2">{person.bannedDate}</td> </tr> ))} </tbody> </table> </div> ); }' > pages/banned_list.tsx	Admin adds/views banned individuals.
6.3	Add Banned List to Navbar	Add banned list link for admin.	sed -i 's/<Link href="\/master_codes" className="block p-2 hover:bg-gray-700">Master Codes<\/Link>/<Link href="\/master_codes" className="block p-2 hover:bg-gray-700">Master Codes<\/Link>\n{session.user.role === "admin" && <Link href="\/banned_list" className="block p-2 hover:bg-gray-700">Banned List<\/Link>}/' components/Navbar.tsx	Admin-only access to banned list.
7.1	Ensure Twilio SMS	Add Twilio for canceled status notifications.	npm install twilio @types/twilio && echo 'import Twilio from "twilio"; const client = Twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN); export async function sendSMS(to: string, body: string) { await client.messages.create({ body, from: process.env.TWILIO_PHONE_NUMBER, to }); }' > lib/sms.ts && echo 'TWILIO_ACCOUNT_SID=your-sid\nTWILIO_AUTH_TOKEN=your-token\nTWILIO_PHONE_NUMBER=your-number\nNEXT_PUBLIC_BASE_URL=https://your-repl.repl.co' >> .env	Requires Twilio account; use trial credit.